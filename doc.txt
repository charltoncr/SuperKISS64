package SuperKISS64 // import "SuperKISS64"

SuperKISS64 is useful when a huge number of different possible pseudorandom
sequences is needed. For example, to fairly shuffle a deck of 52 cards,
a generator capable of 52! different starting states and sequences is required.
52! is approximately 10^68. math/rand has only about 10^19 starting states and
sequences. SuperKISS64 has more than 10^397524 starting states and sequences.

SuperKISS64 passes all dieharder version 3.31.1 tests using George Marsaglia's
acceptable alpha of 0.00001 for PRNGs. Typical runs of SuperKISS64 with
dieharder yield one or a few WEAK results, but not always on the same particular
sub-tests. This behavior is also exhibited by a true cryptographically safe PRNG
with dieharder. George Marsaglia says this is expected behavior in running many
tests.

SuperKISS64.go is dependent on cryptosource.go. cryptosource.go may be used
without SuperKISS64.go.

CONSTANTS

const QSIZE64 = 20632
    QSIZE64 specifies len(SK64.Q).


FUNCTIONS

func SK64SaveState(r *SK64, outfile string) (err error)
    SK64SaveState saves a SuperKISS64 state r to an XML file named by outfile.
    The file size is about 524 KB. If outfile ends with ".gz" SK64SaveState
    saves a gzip'ped XML file; then the typical saved file size is about
    212 KB. Either type of saved state file can be loaded by calling either
    SK64LoadState or LoadState with the same file name used to save the file.


TYPES

type CryptoSource struct {
	// Has unexported fields.
}
    CryptoSource holds the state of one instance of the CryptoSource PRNG.
    New instances can be allocated using NewCryptoSource. math/rand.New() can
    wrap NewCryptoSource.

func NewCryptoSource() *CryptoSource
    NewCryptoSource is NOT intended for cryptographic use. NewCryptoSource
    returns a cryptographically-based math/rand.Source. NewCryptoSource is for
    obtaining high-quality, non-repeatable pseudorandom sequences for general
    use.

    NewCryptoSource may be wrapped by math/rand.New as in this example:

        import "math/rand"
        r := rand.New(NewCryptoSource())

    Then r can use methods provided by math/rand, such as r.Int31n() r.Perm()
    and r.Shuffle(), with CryptoSource as their basis.

    A single instance is not safe for concurrent access by different goroutines.
    If more than one goroutine accesses CryptoSource the callers must
    synchronize access using sync.Mutex or similar, or allocate multiple
    instances of CryptoSource.

func (r *CryptoSource) Int63() int64
    Int63 returns a uniformly-distributed, pseudorandom 64-bit value
    in the range [0,2^63) from CryptoSource. This method is part of the
    math/rand.Source interface.

func (r *CryptoSource) Read(p []byte) (n int, err error)
    Read fills p with pseudorandom bytes from crypto/rand. n is the number of
    bytes read into p; err is an error indicator. n == len(p) iff err == nil.
    This method implements the io.Reader interface.

func (r *CryptoSource) Seed(seed int64)
    Seed is part of the math/rand.Source interface. Seed is a noop.

func (r *CryptoSource) Uint64() (n uint64)
    Uint64 returns a uniformly-distributed, pseudorandom 64-bit value
    in the range [0,2^64) from CryptoSource. This method implements the
    math/rand.Source64 interface.

type SK64 struct {
	Carry  uint64   `xml:"Carry"`
	Xcng   uint64   `xml:"Xcng"`
	Xs     uint64   `xml:"Xs"`
	Index  uint64   `xml:"Index"`
	Q      []uint64 `xml:"Q"`
	Seeded bool     `xml:"Seeded"`
}
    SK64 is the state for SuperKISS64 methods. SuperKISS64's period is more than
    10^397524.

func New() *SK64
    New allocates a SuperKISS64 PRNG and initializes it with a "random" seed.
    It is useful when repeating a sequence is not required. Approximately 10^19
    sequences are possible. See also NewSuperKISS64, NewSuperKISS64Rand and
    NewSuperKISS64FromSlice.

func NewSuperKISS64(seed int64) *SK64
    NewSuperKISS64 allocates a new SuperKISS64 PRNG. Parameter seed determines
    whether or not to initialize for testing. Seed with 0 for George Marsaglia's
    test; otherwise use any int64 seed. Approximately 10^19 sequences are
    possible. If a larger number of starting states/sequences is desired,
    use NewSuperKISS64FromSlice or NewSuperKISS64Rand. NewSuperKISS64 can be
    wrapped with math/rand.New as in this example:

        import "math/rand"
        r := rand.New(NewSuperKISS64(seed))

    Then r can use methods provided by math/rand, such as r.Int31n(), r.Perm()
    and r.Shuffle(). See function TestSK64SaveLoadWrapped in SuperKISS64_test.go
    for an example of how to save and load the state of a wrapped generator.

func NewSuperKISS64Array(q []uint64) *SK64
    NewSuperKISS64Array is provided for compatibility with older versions.
    It is deprecated. Use NewSuperKISS64FromSlice in new code.

func NewSuperKISS64FromSlice(s []uint64) *SK64
    NewSuperKISS64FromSlice allocates a new SuperKISS64 PRNG and initializes
    it using slice s. Slice s should contain QSIZE64 or more "random" values,
    although fewer or more numbers are acceptable. If len(s) > QSIZE64, only the
    first QSIZE64 elements in s are used. NewSuperKISS64FromSlice can be wrapped
    with math/rand.New as in this example:

        import "math/rand"
        r := rand.New(NewSuperKISS64FromSlice(q))

    Then r can use methods provided by math/rand, such as r.Int31n(), r.Perm()
    and r.Shuffle(). See function TestSK64SaveLoadWrapped in SuperKISS64_test.go
    for an example of how to save and load the state of a wrapped generator.

func NewSuperKISS64Rand() *SK64
    NewSuperKISS64Rand does NOT make SuperKISS64 cryptographically secure. It
    allocates a new SuperKISS64 PRNG and initializes it with random numbers from
    crypto/rand. Again, this does NOT make SuperKISS64 cryptographically secure.
    It provides easy access to all 10^397524 possible SuperKISS64 sequences.

    To provide a repeatable initialization with the full range of possible
    sequences, call NewSuperKISS64Rand then immediately call SaveState
    or SK64SaveState. Then to use that state again, call LoadState or
    SK64LoadState.

    NewSuperKISS64Rand can be wrapped with math/rand.New as in this example:

        import "math/rand"
        r := rand.New(NewSuperKISS64Rand())

    Then r can use methods provided by math/rand, such as r.Int31n(), r.Perm()
    and r.Shuffle(). See function TestSK64SaveLoadWrapped in SuperKISS64_test.go
    for an example of how to save and load the state of a wrapped generator.

func SK64LoadState(infile string) (r *SK64, err error)
    SK64LoadState returns a SuperKISS64 generator r loaded from an XML state
    file saved earlier with SaveState or SK64SaveState. Infile should match
    the file name used to save the state. If infile ends with ".gz" then
    SK64LoadState expects a gzip'ped XML file. (nil, err) is returned if an
    error occurs.

func (r *SK64) Float32() float32
    Float32 returns a uniformly-distributed, pseudorandom float32 value in range
    [0.0,1.0) from SuperKISS64. It assumes IEEE 754-1985 or later floating
    point.

func (r *SK64) Float64() float64
    Float64 returns a uniformly-distributed, pseudorandom float64 value in range
    [0.0,1.0) from SuperKISS64. It assumes IEEE 754-1985 or later floating
    point.

func (r *SK64) Int63() int64
    Int63 returns a uniformly distributed pseudorandom number in the range
    [0,2^63) from SuperKISS64. This method implements the math/rand.Source
    interface.

func (r *SK64) LoadState(infile string) (err error)
    LoadState loads SuperKISS64 state r from an XML state file saved earlier
    with SaveState or SK64SaveState. Infile should match the file name used to
    save the state. If infile ends with ".gz" then LoadState expects a gzip'ped
    XML file. If an error occurs r is left unchanged.

func (r *SK64) Read(p []byte) (n int, err error)
    Read fills p with pseudorandom bytes from SuperKISS64. This method
    implements the io.Reader interface. The returned length n is always len(p)
    and err is always nil.

func (r *SK64) SaveState(outfile string) (err error)
    SaveState saves the state of SuperKISS64 PRNG r as XML to a file named by
    outfile. The saved file size is about 524 KB. If outfile ends with ".gz"
    a gzip'ped XML file is saved, and the typical saved file size is about
    212 KB. Either type of saved state file can be loaded by calling either
    SK64LoadState or LoadState with the same file name used to save the file.

    To view a SuperKISS64-saved XML file with line breaks added:

        $ xmllint --format myFile.xml | less

    OR

        $ gzip -cd myFile.xml.gz | xmllint --format - | less

func (r *SK64) Seed(seed int64)
    Seed initializes a SuperKISS64 instance r with seed. Call with seed == 0 for
    SuperKISS64_test.go:TestSuperKISS64. Or call with a seed of any int64 value.
    For a "random" seed, call Seed with argument time.Now().UnixNano(), as New
    does.

func (r *SK64) SeedArray(array []uint64)
    SeedArray is provided for compatibility with older versions. It is
    deprecated. Use SeedFromSlice instead in new code.

func (r *SK64) SeedFromCrypto()
    SeedFromCrypto does NOT make r cryptographically secure. It initializes r
    with random numbers from crypto/rand. Again, SeedFromCrypto does NOT make
    r cryptographically secure. SeedFromCrypto provides easy access to all
    10^397524 possible SuperKISS64 sequences.

func (r *SK64) SeedFromSlice(s []uint64)
    SeedFromSlice provides a full range of repeatable initializations (Seed
    has only 2^63-1 starting points with math/rand). Call SeedFromSlice with a
    slice of one or more random uint64 numbers. It is best to call SeedFromSlice
    with QSIZE64 random numbers, although any number of values is acceptable.
    If len(s) > QSIZE64, only the first QSIZE64 elements in s are used.

func (r *SK64) Uint64() (result uint64)
    Uint64 returns a 64-bit, uniformly distributed pseudorandom number
    in the range [0,2^64) from SuperKISS64. This method implements the
    math/rand.Source64 interface.

